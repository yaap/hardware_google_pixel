/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdint.h>

namespace android {
namespace hardware {
namespace google {
namespace pixel {

namespace mm_metrics_reporter_test_golden_result {
/**
 * Per hour data are snapshot data, mostly (except for PSI) are
 * directly from corresponding sysnode values.  field mapping could be
 * obtained in the atom (i.e. PixelMmMetricsPerHour) definition.
 * the field name also suggests the related sysfs node and fields.
 *
 * Test values (i.e. data injection for sysfs nodes) are first
 * generated by a script, and then manually modified and examined, to
 * ensure each field has unique value (to catch erroneous writes to
 * the wrong entries (wrong offsets).
 */
const int64_t PixelMmMetricsPerHour_golden[]{
        // clang-format off
    2645,
    2761,
    2769,
    2713,
    2685,
    2709,
    3225,
    3229,
    2717,
    7048,
    9050,
    8049,
    11052,
    10051,
    220,
    720,
    470,
    250,
    750,
    500,
    280,
    780,
    530,
    420,
    920,
    670,
    450,
    950,
    700,
    480,
    980,
    730,
    320,
    820,
    570,
    350,
    850,
    600,
    380,
    880,
    630,
    620,
    1120,
    870,
    650,
    1150,
    900,
    680,
    1180,
    930,
    520,
    1020,
    770,
    550,
    1050,
    800,
    580,
    1080,
    830,
    -1,
    2785,
    2677,
    177,
        // clang-format on
};

/**
 * Per day data are diff data from previous day read of related sysfs
 * nodes..
 *
 * Test values (i.e. data injection for sysfs nodes) are first
 * generated by a script, and then manually modified and examined, to
 * ensure each field has unique value (to catch erroneous writes to
 * the wrong entries (wrong offsets).
 */
const int64_t PixelMmMetricsPerDay_golden[]{
        // clang-format off
    1297761,
    1026845,
    1029713,
    1291325,
    1041225,
    1044113,
    1047005,
    1294541,
    1032585,
    1035461,
    1038341,
    1084965,
    1087913,
    1090865,
    1093821,
    1138641,
    1412981,
    1419713,
    1416345,
    181,
    53,
    1336713,
    1339985,
    1343261,
    1346541,
    1349825,
    1396221,
    1399565,
    1402913,
    1406265,
    1409621,
    1376241,
    1379561,
    1382885,
    1386213,
    1389545,
    1356405,
    1359701,
    1363001,
    1366305,
    1369613,
    1313921,
    1317165,
    1320413,
    1323665,
    1326921,
    1330181,
    937181,
    939921,
    1172081,
    1169021,
    1120605,
    1123601,
    1227845,
    1253045,
    1240413,
    1153781,
    1246721,
    -1,
    55250,
    5201,
    5405,
    1126601,
        // clang-format on
};

const uint64_t MmMetricsOomGroupMemUsage_golden[2][23][7]{
        // clang-format off
    {
        {0, 0, 102, 103, 104, 105, 106},
        {1, 201, 0, 203, 204, 205, 206},
        {2, 301, 302, 0, 304, 305, 306},
        {3, 401, 402, 403, 0, 405, 406},
        {4, 501, 502, 503, 504, 0, 506},
        {5, 601, 602, 603, 604, 605, 0},
        {6, 701, 702, 703, 704, 705, 706},
        {7, 801, 802, 803, 804, 805, 806},
        {8, 901, 902, 903, 904, 905, 906},
        {9, 1001, 1002, 1003, 1004, 1005, 1006},
        {10, 1101, 1102, 1103, 1104, 1105, 1106},
        {11, 1201, 1202, 1203, 1204, 1205, 1206},
        {12, 1301, 1302, 1303, 1304, 1305, 1306},
        {13, 1401, 1402, 1403, 1404, 1405, 1406},
        {14, 1501, 1502, 1503, 1504, 1505, 1506},
        {15, 1601, 1602, 1603, 1604, 1605, 1606},
        {16, 1701, 1702, 1703, 1704, 1705, 1706},
        {17, 1801, 1802, 1803, 1804, 1805, 1806},
        {18, 1901, 1902, 1903, 1904, 1905, 1906},
        {19, 2001, 2002, 2003, 2004, 2005, 2006},
        {20, 2101, 2102, 2103, 2104, 2105, 2106},
        {21, 2201, 2202, 2203, 2204, 2205, 2206},
        {22, 2301, 2302, 2303, 2304, 2305, 2306},
    },
    {
        {0, 3101, 3102, 3103, 3104, 3105, 3106},
        {1, 3201, 3202, 3203, 3204, 3205, 3206},
        {2, 3301, 3302, 3303, 3304, 3305, 3306},
        {3, 3401, 3402, 3403, 3404, 3405, 3406},
        {4, 3501, 3502, 3503, 3504, 3505, 3506},
        {5, 3601, 3602, 3603, 3604, 3605, 3606},
        {6, 3701, 3702, 3703, 3704, 3705, 3706},
        {7, 3801, 3802, 3803, 3804, 3805, 3806},
        {8, 3901, 3902, 3903, 3904, 3905, 3906},
        {9, 4001, 4002, 4003, 4004, 4005, 4006},
        {10, 4101, 4102, 4103, 4104, 4105, 4106},
        {11, 4201, 4202, 4203, 4204, 4205, 4206},
        {12, 4301, 4302, 4303, 4304, 4305, 4306},
        {13, 4401, 4402, 4403, 4404, 4405, 4406},
        {14, 4501, 4502, 4503, 4504, 4505, 4506},
        {15, 4601, 4602, 4603, 4604, 4605, 4606},
        {16, 4701, 4702, 4703, 4704, 4705, 4706},
        {17, 4801, 4802, 4803, 4804, 4805, 4806},
        {18, 4901, 4902, 4903, 4904, 4905, 4906},
        {19, 5001, 5002, 5003, 5004, 5005, 5006},
        {20, 5101, 5102, 5103, 5104, 5105, 5106},
        {21, 5201, 5202, 5203, 5204, 5205, 5206},
        {22, 5301, 5302, 5303, 5304, 5305, 5306},
    }
        // clang-format on
};

const uint64_t MmMetricsGcmaPerHour_golden[1] = {
        13,
};

const uint64_t MmMetricsGcmaPerDaySimple_golden[4] = {1, 2, 3, 4};

const uint64_t MmMetricsGcmaPerDayHistogram_golden[4] = {5, 6, 7, 8};

}  // namespace mm_metrics_reporter_test_golden_result

}  // namespace pixel
}  // namespace google
}  // namespace hardware
}  // namespace android
